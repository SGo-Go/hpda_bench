From 4540a06fb0a4e05bef2b2993bff1dce729a690fc Mon Sep 17 00:00:00 2001
From: SGogolenko <gogolenko@hlrs.de>
Date: Tue, 26 Nov 2019 11:39:31 +0100
Subject: [PATCH] [HiBench] Gilgamesh adoptions

---
 bin/functions/workload_functions.sh |   9 +++
 bin/prepare_all.sh                  | 111 +++++++++++++++++++++++++++++++++++
 bin/run_bench_full.sh               |  22 +++++++
 bin/run_frameworks_only.sh          | 114 ++++++++++++++++++++++++++++++++++++
 conf/benchmarks.lst                 |   6 +-
 conf/frameworks.lst                 |   1 -
 conf/hibench.conf                   |   4 +-
 7 files changed, 259 insertions(+), 8 deletions(-)
 create mode 100755 bin/prepare_all.sh
 create mode 100755 bin/run_bench_full.sh
 create mode 100755 bin/run_frameworks_only.sh

diff --git a/bin/functions/workload_functions.sh b/bin/functions/workload_functions.sh
index 3055d53..9711f1c 100644
--- a/bin/functions/workload_functions.sh
+++ b/bin/functions/workload_functions.sh
@@ -213,6 +213,15 @@ function run_spark_job() {
            YARN_OPTS="${YARN_OPTS} --driver-memory ${SPARK_YARN_DRIVER_MEMORY}"
        fi
     fi
+    if [[ "$SPARK_MASTER" == mesos* ]]; then
+        YARN_OPTS="--total-executor-cores ${YARN_EXECUTOR_CORES}"
+       if [[ -n "${SPARK_YARN_EXECUTOR_MEMORY:-}" ]]; then
+           YARN_OPTS="${YARN_OPTS} --executor-memory ${SPARK_YARN_EXECUTOR_MEMORY}"
+       fi
+       if [[ -n "${SPAKR_YARN_DRIVER_MEMORY:-}" ]]; then
+           YARN_OPTS="${YARN_OPTS} --driver-memory ${SPARK_YARN_DRIVER_MEMORY}"
+       fi
+    fi
     if [[ "$CLS" == *.py ]]; then 
         LIB_JARS="$LIB_JARS --jars ${SPARKBENCH_JAR}"
         SUBMIT_CMD="${SPARK_HOME}/bin/spark-submit ${LIB_JARS} --properties-file ${SPARK_PROP_CONF} --master ${SPARK_MASTER} ${YARN_OPTS} ${CLS} $@"
diff --git a/bin/prepare_all.sh b/bin/prepare_all.sh
new file mode 100755
index 0000000..65c24f9
--- /dev/null
+++ b/bin/prepare_all.sh
@@ -0,0 +1,111 @@
+#!/bin/bash
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+set -u
+
+current_dir=`dirname "$0"`
+root_dir=`cd "${current_dir}/.."; pwd`
+
+URIKA_YARN_NODES=${1:-3}
+
+. ${root_dir}/bin/functions/color.sh
+
+echo -e "${BGreen}start resource allocation...${Color_Off}"
+echo -e "${BCyan}Flex up YARN: ${Cyan}urika-yam-flexup --nodes ${URIKA_YARN_NODES} --identifier hibench-prepare --timeout 720${Color_Off}"
+urika-yam-flexup --nodes ${URIKA_YARN_NODES} --identifier hibench-prepare --timeout 720
+echo -e "${UGreen}${BGreen}allocated resources${Color_Off}"
+
+function exit_with_cleanup(){ # exit script and release URIKA nodes
+    echo -e "${UGreen}${BGreen}flex down YARN${Color_Off}"
+    urika-yam-flexdown --identifier hibench-prepare
+    exit $1
+}
+
+for benchmark in `cat $root_dir/conf/benchmarks.lst`; do
+    if [[ $benchmark == \#* ]]; then
+        continue
+    fi
+
+    echo -e "${UYellow}${BYellow}Prepare ${Yellow}${UYellow}${benchmark} ${BYellow}...${Color_Off}"
+    benchmark="${benchmark/.//}"
+
+    WORKLOAD=$root_dir/bin/workloads/${benchmark}
+    echo -e "${BCyan}Exec script: ${Cyan}${WORKLOAD}/prepare/prepare.sh${Color_Off}"
+    "${WORKLOAD}/prepare/prepare.sh"
+
+    result=$?
+    if [ $result -ne 0 ]
+    then
+	echo "ERROR: ${benchmark} prepare failed!"
+        exit_with_cleanup $result
+    fi
+
+  #   for framework in `cat $root_dir/conf/frameworks.lst`; do
+  # 	if [[ $framework == \#* ]]; then
+  # 	    continue
+  # 	fi
+
+  # 	if [ $benchmark == "micro/dfsioe" ] && [ $framework == "spark" ]; then
+  # 	    continue
+  # 	fi
+  # 	if [ $benchmark == "websearch/nutchindexing" ] && [ $framework == "spark" ]; then
+  # 	    continue
+  # 	fi
+  # 	if [ $benchmark == "graph/nweight" ] && [ $framework == "hadoop" ]; then
+  # 	    continue
+  # 	fi
+  # 	if [ $benchmark == "ml/lr" ] && [ $framework == "hadoop" ]; then
+  # 	    continue
+  # 	fi
+  # 	if [ $benchmark == "ml/als" ] && [ $framework == "hadoop" ]; then
+  # 	    continue
+  # 	fi
+  # 	if [ $benchmark == "ml/svm" ] && [ $framework == "hadoop" ]; then
+  # 	    continue
+  # 	fi
+  # if [ $benchmark == "ml/pca" ] && [ $framework == "hadoop" ]; then
+  #     continue
+  # fi
+  # if [ $benchmark == "ml/gbt" ] && [ $framework == "hadoop" ]; then
+  #      continue
+  # fi
+  # if [ $benchmark == "ml/rf" ] && [ $framework == "hadoop" ]; then
+  #       continue
+  # fi  
+  # if [ $benchmark == "ml/svd" ] && [ $framework == "hadoop" ]; then
+  #     continue
+  # fi      
+  # if [ $benchmark == "ml/linear" ] && [ $framework == "hadoop" ]; then
+  #     continue
+  # fi
+  # if [ $benchmark == "ml/lda" ] && [ $framework == "hadoop" ]; then
+  #     continue
+  # fi
+
+  # 	echo -e "${UYellow}${BYellow}Run ${Yellow}${UYellow}${benchmark}/${framework}${Color_Off}"
+  # 	echo -e "${BCyan}Exec script: ${Cyan}$WORKLOAD/${framework}/run.sh${Color_Off}"
+  # 	$WORKLOAD/${framework}/run.sh
+
+  # 	result=$?
+  # 	if [ $result -ne 0 ]
+  # 	then
+  # 	    echo -e "${On_IRed}ERROR: ${benchmark}/${framework} failed to run successfully.${Color_Off}"
+  #           exit $result
+  # 	fi
+  #   done
+done
+
+echo "Run all done!"
+exit_with_cleanup 0
diff --git a/bin/run_bench_full.sh b/bin/run_bench_full.sh
new file mode 100755
index 0000000..c4a4d3e
--- /dev/null
+++ b/bin/run_bench_full.sh
@@ -0,0 +1,22 @@
+#!/bin/bash
+
+# tiny small large huge gigantic and bigdata.
+ALL_SCALES=${1:-tiny small}
+# 576 288 144 72 36
+ALL_NCORES=${2:-576 288 144 72 36}
+NNODES_PREPARE=8
+NUM_REPEATS=1
+REPORTS_DIR=./report/summary
+
+mkdir -p ${REPORTS_DIR}
+for TEST_SCALE in ${ALL_SCALES}
+do
+    sed -i -E "s/(^hibench.scale.profile\s+)([a-z]+)/\1${TEST_SCALE}/" ./conf/hibench.conf
+    ./bin/prepare_all.sh ${NNODES_PREPARE}
+    for NUM_CORES in ${ALL_NCORES}
+    do
+	sed -i -E "s/(^hibench.yarn.executor.cores\s+)([0-9]+)/\1${NUM_CORES}/" ./conf/spark.conf
+	./bin/run_frameworks_only.sh ${NUM_REPEATS}
+	mv -f ./report/hibench.report ${REPORTS_DIR}/hibench-${TEST_SCALE}-${NUM_CORES}.report
+    done
+done
diff --git a/bin/run_frameworks_only.sh b/bin/run_frameworks_only.sh
new file mode 100755
index 0000000..be390a5
--- /dev/null
+++ b/bin/run_frameworks_only.sh
@@ -0,0 +1,114 @@
+#!/bin/bash
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+set -u
+
+NO_REPEAT=${1:-1}
+
+current_dir=`dirname "$0"`
+root_dir=`cd "${current_dir}/.."; pwd`
+
+# module load tools/mesos
+
+. ${root_dir}/bin/functions/color.sh
+
+# echo -e "${BGreen}start resource allocation...${Color_Off}"
+# echo -e "${BCyan}Flex up YARN: ${Cyan}urika-yam-flexup --nodes ${URIKA_YARN_NODES} --identifier hibench-prepare --timeout 720${Color_Off}"
+# urika-yam-flexup --nodes ${URIKA_YARN_NODES} --identifier hibench-prepare --timeout 720
+# echo -e "${UGreen}${BGreen}allocated resources${Color_Off}"
+
+# function exit_with_cleanup(){ # exit script and release URIKA nodes
+#     echo -e "${UGreen}${BGreen}flex down YARN${Color_Off}"
+#     urika-yam-flexdown --identifier hibench-prepare
+#     exit $1
+# }
+
+for benchmark in `cat $root_dir/conf/benchmarks.lst`; do
+    if [[ $benchmark == \#* ]]; then
+        continue
+    fi
+
+    echo -e "${UYellow}${BYellow}Prepare ${Yellow}${UYellow}${benchmark} ${BYellow}...${Color_Off}"
+    benchmark="${benchmark/.//}"
+
+    WORKLOAD=$root_dir/bin/workloads/${benchmark}
+    # echo -e "${BCyan}Exec script: ${Cyan}${WORKLOAD}/prepare/prepare.sh${Color_Off}"
+    # "${WORKLOAD}/prepare/prepare.sh"
+
+    # result=$?
+    # if [ $result -ne 0 ]
+    # then
+    # 	echo "ERROR: ${benchmark} prepare failed!"
+    #     exit_with_cleanup $result
+    # fi
+
+    for no_repeat in $(seq 1 $NO_REPEAT); do
+	    for framework in `cat $root_dir/conf/frameworks.lst`; do
+  		if [[ $framework == \#* ]]; then
+  		    continue
+  		fi
+
+  		if [ $benchmark == "micro/dfsioe" ] && [ $framework == "spark" ]; then
+  		    continue
+  		fi
+  		if [ $benchmark == "websearch/nutchindexing" ] && [ $framework == "spark" ]; then
+  		    continue
+  		fi
+  		if [ $benchmark == "graph/nweight" ] && [ $framework == "hadoop" ]; then
+  		    continue
+  		fi
+  		if [ $benchmark == "ml/lr" ] && [ $framework == "hadoop" ]; then
+  		    continue
+  		fi
+  		if [ $benchmark == "ml/als" ] && [ $framework == "hadoop" ]; then
+  		    continue
+  		fi
+  		if [ $benchmark == "ml/svm" ] && [ $framework == "hadoop" ]; then
+  		    continue
+  		fi
+		if [ $benchmark == "ml/pca" ] && [ $framework == "hadoop" ]; then
+		    continue
+		fi
+		if [ $benchmark == "ml/gbt" ] && [ $framework == "hadoop" ]; then
+		    continue
+		fi
+		if [ $benchmark == "ml/rf" ] && [ $framework == "hadoop" ]; then
+		    continue
+		fi  
+		if [ $benchmark == "ml/svd" ] && [ $framework == "hadoop" ]; then
+		    continue
+		fi      
+		if [ $benchmark == "ml/linear" ] && [ $framework == "hadoop" ]; then
+		    continue
+		fi
+		if [ $benchmark == "ml/lda" ] && [ $framework == "hadoop" ]; then
+		    continue
+		fi
+
+  		echo -e "${UYellow}${BYellow}Run ${Yellow}${UYellow}${benchmark}/${framework}${Color_Off}"
+  		echo -e "${BCyan}Exec script: ${Cyan}$WORKLOAD/${framework}/run.sh${Color_Off}"
+  		$WORKLOAD/${framework}/run.sh
+
+  		result=$?
+  		if [ $result -ne 0 ]
+  		then
+  		    echo -e "${On_IRed}ERROR: ${benchmark}/${framework} failed to run successfully.${Color_Off}"
+		    exit $result
+  		fi
+	    done
+	done
+    done
+
+echo "Run all done!"
diff --git a/conf/benchmarks.lst b/conf/benchmarks.lst
index f8b8fed..81bc314 100644
--- a/conf/benchmarks.lst
+++ b/conf/benchmarks.lst
@@ -1,20 +1,16 @@
 micro.sleep
 micro.sort
-micro.terasort
 micro.wordcount
-micro.dfsioe
 
 sql.aggregation
 sql.join
 sql.scan
 
-websearch.nutchindexing
 websearch.pagerank
 
 ml.bayes
 ml.kmeans
 ml.lr
-ml.als
 ml.pca
 ml.gbt
 ml.rf
@@ -23,4 +19,4 @@ ml.linear
 ml.lda
 ml.svm
 
-graph.nweight
\ No newline at end of file
+graph.nweight
diff --git a/conf/frameworks.lst b/conf/frameworks.lst
index 32ecfe2..53ece11 100644
--- a/conf/frameworks.lst
+++ b/conf/frameworks.lst
@@ -1,2 +1 @@
-hadoop
 spark
\ No newline at end of file
diff --git a/conf/hibench.conf b/conf/hibench.conf
index 5316e4d..6bc5d1d 100644
--- a/conf/hibench.conf
+++ b/conf/hibench.conf
@@ -1,6 +1,6 @@
 # Data scale profile. Available value is tiny, small, large, huge, gigantic and bigdata.
 # The definition of these profiles can be found in the workload's conf file i.e. conf/workloads/micro/wordcount.conf
-hibench.scale.profile                tiny
+hibench.scale.profile                gigantic
 # Mapper number in hadoop, partition number in Spark
 hibench.default.map.parallelism         8
 
@@ -31,7 +31,7 @@ hibench.configure.dir		${hibench.home}/conf
 hibench.hdfs.data.dir		${hibench.hdfs.master}/HiBench
 
 # path of hibench jars
-hibench.hibench.datatool.dir	          ${hibench.home}/autogen/target/autogen-7.1-SNAPSHOT-jar-with-dependencies.jar
+hibench.hibench.datatool.dir            ${hibench.home}/autogen/target/autogen-7.1-SNAPSHOT-jar-with-dependencies.jar
 hibench.common.jar                      ${hibench.home}/common/target/hibench-common-7.1-SNAPSHOT-jar-with-dependencies.jar
 hibench.sparkbench.jar                  ${hibench.home}/sparkbench/assembly/target/sparkbench-assembly-7.1-SNAPSHOT-dist.jar
 hibench.streambench.stormbench.jar      ${hibench.home}/stormbench/streaming/target/stormbench-streaming-7.1-SNAPSHOT.jar
-- 
1.8.3.1

